#!/usr/bin/python -E
#
#	All options:
#
#	-t [tags]			: Get value of tags provided
#	-r [regex]			: python re package regular expression string to match tags
#	-R [regex]			: python re package regular expression string to match single tag (override)
# Copyright (C) {2013-2014}  {Louis Fry}
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# Python specific
import os
import sys
import getopt
import re

optlist = []						# Options and arguments returned by getopt
args = []

tags_list = []						# list of tags
tags_regex = "(.*)\:(.*)"			# regular expression for matching tags and their values
tag_regex = "(%s)\:(.*)"
header_delimit_line = "\n"			# line that delimits the header from the data

fd = None			# file descriptor

# Get options and file name(s)
try:
	optlist, args = getopt.gnu_getopt(sys.argv[1:],"t:r:R:")
except getopt.GetoptError as e:
	print "ERROR: getopt: '%s'." % (e.msg)
	sys.exit(-1)

if len(args) == 0:
	print "ERROR: plotdat_hp: No files passed."
	sys.exit(-1)

# Reformat option list
optdict = {}
for opt,arg in optlist:
	optdict[opt] = arg

# Handle options
try:
	x = optdict["-t"]
	tags_list = x.split('\\')
except KeyError as e:
	print "ERROR: plotdat_hp: -t option is required."
	sys.exit(-1)

try:
	x = optdict["-r"]
	tag_regex = x
except KeyError as e:
	pass
	
try:
	x = optdict["-R"]
	tags_regex = x
except KeyError as e:
	pass

# Open specified file
try:
	fd = open(args[0],'r')
except IOError:
	print "ERROR: Invalid data file name '%s'." % args[0]
	sys.exit(-1)

# Get file length and header length
found_delim = False
header_lines = []
header_length = 0
lines_read = 0
for line in fd:
	if line == header_delimit_line:
		found_delim = True
	if not found_delim:
		header_lines.append(line)
		header_length += 1
	lines_read += 1
header_string = "".join(header_lines)

# Close file
fd.close()

# Analyse header lines
if lines_read - header_length == 0:
	print "No header in data file '%s'." % args[0]
	sys.exit(-1)
elif lines_read - header_length == 1:
	print "Header delimiting line found at top of file '%s'." % args[0]
	sys.exit(-1)

# Get requested tab values
tag_matches = []
for tag in tags_list:
	res = re.findall(tag_regex % tag,header_string)
	if res == []:
		continue
	tag_matches.append(res)

if tag_matches == []:
	print "No matches to specified tags."
	sys.exit(-1)

# Print the number of header lines
print header_length

# Print the tag matches found
for tm in tag_matches:
	t,v = tm[0]
	print "%s=%s" % ("".join(t.strip(":\t").split(" ")),"".join(v.strip("\t").split(" ")))

#p = re.compile(tag_regex % tags_list[0])
#res = p.findall(header_string)
#print repr(tag_matches)

# Get strings enclosed between '\n' and ':' character
p = re.compile(tags_regex)
res = p.findall(header_string)

# info
#header_string = header_string.strip('\n')
#print "Header length: %i." % header_length
#print "Header lines: \n %s" % (repr(res))



